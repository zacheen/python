# my 簡化邏輯 Runtime: 1589 ms, faster than 75.00% of Python3
class Solution:
    def maximumWhiteTiles(self, tiles, carpetLen):
        tiles.sort()
        # print(tiles)
        tiles = [(t[0], t[1], t[1]-t[0]+1) for t in tiles]
        l = 0
        max_sum = 0
        # max_place = None
        now_sum = 0
        for r, t_r in enumerate(tiles) :
            now_sum += t_r[2]
            l_bound = t_r[1]-carpetLen+1 #可以包含

            # 移除 l 往右縮
            while tiles[l][1] < l_bound :
                now_sum -= tiles[l][2]
                l += 1

            # 判斷 最新的答案
            # if now_sum - max(l_bound - tiles[l][0], 0) > max_sum :
            #     max_place = (l,r)
            max_sum = max(max_sum, now_sum - max(l_bound - tiles[l][0], 0))
        
        # print(max_place)
        return min(max_sum, carpetLen)

# my 
# class Solution:
#     def maximumWhiteTiles(self, tiles, carpetLen):
#         tiles.sort()
#         # print(tiles)
#         tiles = [(t[0], t[1], t[1]-t[0]+1) for t in tiles]
#         l = 0
#         max_sum = 0
#         now_sum = 0
#         for r, t_r in enumerate(tiles) :
#             now_sum += t_r[2]
#             l_bound = t_r[1]-carpetLen+1
#             # if l_bound >= tiles[l][0]: 
#                 # 當初加這個的原因是覺得有東西要刪除時 再計算最大即可
#                 # 但應該是 加新的項目之前 跟 是加新的項目之後再縮減 這兩種情況都有可能最大
#                 # 1,2,3,4
#                 # 擴張
#                 # 1,2,3,4,5,6   加新的項目之前
#                 # 1,2,3,4,5,6,7 超出範圍
#                 #   2,3,4,5,6,7 是加新的項目之後再縮減
#             # print("rl",r , l)
#             while r > l :
#                 # print("over", l_bound , tiles[l][1], tiles[l][0])
#                 if l_bound <= tiles[l][0] :
#                     print("new ans2", now_sum, r, l)
#                     max_sum = max(max_sum, now_sum)
#                     break
#                 elif tiles[l][1] < l_bound :
#                     now_sum -= tiles[l][2]
#                     l += 1
#                 else :
#                     # print("new ans", now_sum - (l_bound - tiles[l][0]), r, l, (l_bound - tiles[l][0]))
#                     max_sum = max(max_sum, now_sum - (l_bound - tiles[l][0]))
#                     break
#             if r == l :
#                 if now_sum >= carpetLen :
#                     # print("direct return")
#                     return carpetLen
#                 else :
#                     # print("new ans3", now_sum , r, l)
#                     max_sum = max(max_sum, now_sum)
#             r+=1
            
#         # print("final compare",now_sum)
#         max_sum = max(now_sum, max_sum)
#         return max_sum

# given ans 概念跟我一樣 不過竟然是從前面算

s = Solution()

# print(s.maximumWhiteTiles([[1,5],[10,11],[12,18],[20,25],[30,32]], 10))
# print(s.maximumWhiteTiles([[10,11],[1,1]], 2))

# for i in range(6,14) :
#     print(i,s.maximumWhiteTiles([[9,9], [11,17]], i))

# print(s.maximumWhiteTiles([[8,9], [11,17]], 9))
# print(s.maximumWhiteTiles([[1,1], [3,3], [5,5],[6,6],[7,7],[9,9],[12,12]], 9))

# print(s.maximumWhiteTiles([[3745,3757],[3663,3681],[3593,3605],[3890,3903],[3529,3539],[3684,3686],[3023,3026],[2551,2569],[3776,3789],[3243,3256],[3477,3497],[2650,2654],[2264,2266],[2582,2599],[2846,2863],[2346,2364],[3839,3842],[3926,3935],[2995,3012],[3152,3167],[4133,4134],[4048,4058],[3719,3730],[2498,2510],[2277,2295],[4117,4128],[3043,3054],[3394,3402],[3921,3924],[3500,3514],[2789,2808],[3291,3294],[2873,2881],[2760,2760],[3349,3362],[2888,2899],[3802,3822],[3540,3542],[3128,3142],[2617,2632],[3979,3994],[2780,2781],[3213,3233],[3099,3113],[3646,3651],[3956,3963],[2674,2691],[3860,3873],[3363,3370],[2727,2737],[2453,2471],[4011,4031],[3566,3577],[2705,2707],[3560,3565],[3454,3456],[3655,3660],[4100,4103],[2382,2382],[4032,4033],[2518,2531],[2739,2749],[3067,3079],[4068,4074],[2297,2312],[2489,2490],[2954,2974],[2400,2418],[3271,3272],[3628,3632],[3372,3377],[2920,2940],[3315,3330],[3417,3435],[4146,4156],[2324,2340],[2426,2435],[2373,2376],[3621,3626],[2826,2832],[3937,3949],[3178,3195],[4081,4082],[4092,4098],[3688,3698]],
# 1638))
print(s.maximumWhiteTiles([[935,935],[390,390],[106,106],[968,968],[906,906],[274,274],[465,465],[507,507],[597,597],[927,927],[778,778],[198,198],[272,272],[207,207],[157,157],[493,493],[816,816],[752,752],[281,281],[656,656],[153,153],[919,919],[537,537],[58,58],[592,592],[240,240],[721,721],[513,513],[408,408],[284,284],[61,61],[24,24],[964,964],[611,611],[261,261],[584,584],[509,509],[127,127],[928,928],[823,823],[985,985],[20,20],[885,885],[856,856],[33,33],[301,301],[501,501],[163,163],[740,740],[620,620],[80,80],[283,283],[644,644],[777,777],[170,170],[558,558],[355,355],[350,350],[340,340],[959,959],[65,65],[662,662],[389,389],[548,548],[923,923],[19,19],[426,426],[997,997],[528,528],[682,682],[884,884],[967,967],[368,368],[588,588],[763,763],[21,21],[472,472],[896,896],[341,341],[510,510],[631,631],[337,337],[649,649],[626,626],[817,817],[930,930],[695,695],[46,46],[354,354],[437,437],[183,183],[348,348],[181,181],[732,732],[593,593],[176,176],[825,825],[118,118],[594,594],[616,616],[681,681],[235,235],[900,900],[126,126],[545,545],[215,215],[523,523],[352,352],[737,737],[115,115],[402,402],[346,346],[395,395],[56,56],[228,228],[137,137],[916,916],[569,569],[954,954],[335,335],[422,422],[151,151],[551,551],[628,628],[842,842],[174,174],[295,295],[18,18],[329,329],[828,828],[996,996],[529,529],[482,482],[488,488],[657,657],[294,294],[818,818],[478,478],[902,902],[83,83],[535,535],[589,589],[750,750],[327,327],[794,794],[59,59],[530,530],[95,95],[144,144],[809,809],[859,859],[874,874],[6,6],[636,636],[147,147]],
127))

