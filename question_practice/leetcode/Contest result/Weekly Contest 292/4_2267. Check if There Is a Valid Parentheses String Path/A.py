# 如果路線是組合的 (向下N次 向右M次) 就不應該用 DFS
# My v2 一行一行掃 911 ms
class Solution(object):
    def hasValidPath(self, grid):
        can_mem = [[set() for _ in range(len(grid[0]))] for __ in range(len(grid))]

        # 先填好最上面與最左邊行
        count = 0
        for i in range(len(grid)):
            if grid[i][0] == "(" :
                count += 1
            else :
                count -= 1

            if count >= 0 :
                can_mem[i][0] = set([count])
            else :
                break

        count = 0
        for i in range(len(grid[0])):
            if grid[0][i] == "(" :
                count += 1
            else :
                count -= 1

            if count >= 0 :
                can_mem[0][i] = set([count])
            else :
                break

        for i in range(1,len(grid)):
            for ii in range(1,len(grid[0])):
                pos_comb = can_mem[i-1][ii].union(can_mem[i][ii-1])

                this_mem = can_mem[i][ii]
                if grid[i][ii] == "(":
                    this_mem = set(p+1 for p in pos_comb)
                else :
                    this_mem = set(p-1 for p in pos_comb)
                
                # 去除為負的
                if -1 in this_mem:
                    this_mem.remove(-1)
                if -2 in this_mem:
                    this_mem.remove(-2)
                can_mem[i][ii] = this_mem

        # print(can_mem)    
        # print(can_mem[len(grid)-1][len(grid[0])-1])
        return 0 in can_mem[len(grid)-1][len(grid[0])-1]

# given ans 
# 我是用set紀錄 有些人用 True/False list(初始化 N+M 的大小)


# my v1 Time Limit Exceeded 
# class Solution(object):
#     def hasValidPath(self, grid):
#         """
#         :type grid: List[List[str]]
#         :rtype: bool
#         """
#         bound_i = len(grid)-1
#         bound_ii = len(grid[0])-1
        
#         # fast
#         if bound_i + bound_ii % 2 == 0 :
#             return False
        
#         fail_mem = [[[] for _ in range(len(grid[0]))] for __ in range(len(grid))]
#         def dfs(now_i, now_ii, count) :
#             this_fail_mem = fail_mem[now_i][now_ii]
#             if count in this_fail_mem :
#                 # print("fast")
#                 return False
            
#             if now_i == bound_i and now_ii==bound_ii :
#                 # print("count", count)
#                 if count == 0 :
#                     return True
                
#             # down
#             pos_i = now_i
#             pos_ii = now_ii+1
#             if pos_ii <= bound_ii :
#                 if grid[pos_i][pos_ii] == "(" :
#                     count_change = 1
#                 else :
#                     count_change = -1

#                 after = count + count_change
#                 if after >= 0 and dfs(pos_i, pos_ii, after) :
#                     return True
            
#             # left
#             pos_i = now_i+1
#             if pos_i <= bound_i :
#                 pos_ii = now_ii

#                 if grid[pos_i][pos_ii] == "(" :
#                     count_change = 1
#                 else :
#                     count_change = -1

#                 after = count + count_change
#                 if after >= 0 :
#                     return dfs(pos_i, pos_ii, after)
#             this_fail_mem.append(count)
#             return False
            
#         if grid[0][0] == ")":
#             return False
#         else :
#             return dfs(0,0, 1)
        

            

# given ans

s = Solution()
# print(s.hasValidPath([["(","(","("],
#                       [")","(",")"],
#                       ["(",")",")"],
#                       ["(","(",")"]]))
# print(s.hasValidPath([["(","(","("],
#                       [")","(","("],
#                       ["(","(","("],
#                       [")","(",")"]]))
# print(s.hasValidPath([["(","(",")","(",")","(","(",")","(","(",")",")",")",")",")","(",")","(","(",")","(","(",")",")",")",")",")","(","(","(","("],
#                       [")","(","(","(",")","(",")","(","(",")",")",")",")","(",")",")","(","(",")",")","(",")","(",")","(","(",")","(",")","(","("],
#                       [")",")","(","(",")","(","(",")",")",")",")","(","(",")",")","(",")","(",")",")","(","(","(",")",")",")","(",")",")","(",")"],
#                       ["(","(",")","(",")","(","(",")","(","(","(",")",")","(",")","(",")",")",")",")",")",")","(","(",")","(",")","(",")","(","("],
#                       [")",")","(",")",")","(","(","(",")",")","(",")","(",")",")",")","(","(","(",")",")","(",")","(",")",")","(","(","(","(",")"],
#                       [")",")","(","(",")","(",")","(",")","(",")","(",")",")","(",")","(",")",")","(",")","(","(","(",")","(",")",")",")","(","("],




