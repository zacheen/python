from typing import List
import functools
from collections import deque
import math
# # my Time Limit Exceeded
# class Solution:
#     def minimumVisitedCells(self, grid: List[List[int]]) -> int:
#         # BFS 
#             # 1 <= m * n <= 10**5 所以 BFS 最多也就 10**5 次
#             # 是因為支線太多 所以還是超出 Time Limit 嗎?
#                 # 因為我已經判斷只要做過就不會再重做了
        
#         len_1D = len(grid)
#         len_2D = len(grid[0])
#         last_1D = len_1D-1
#         last_2D = len_2D-1
#         mem_len = [[math.inf]*len_2D for _ in range(len_1D)]
#         next_p_list = deque([(0,0,1)])
#         while next_p_list :
#             # print(next_p_list)
#             now_p_1D, now_p_2D, now_len = next_p_list.popleft()
#             if now_p_1D == last_1D and now_p_2D == last_2D :
#                 return now_len

#             if now_len >= mem_len[now_p_1D][now_p_2D] :
#                 continue

#             # print("can go p :",now_p_1D,now_p_2D)
#             mem_len[now_p_1D][now_p_2D] = now_len
#             step = grid[now_p_1D][now_p_2D] +1 # +1 because I am using range
#             for next_1D in range(now_p_1D+1, min(now_p_1D+step, len_1D)) :
#                 next_p_list.append((next_1D, now_p_2D, now_len+1))
#             for next_2D in range(now_p_2D+1, min(now_p_2D+step, len_2D)) :
#                 next_p_list.append((now_p_1D, next_2D, now_len+1))

#         return -1

# # 如果提早判斷 會比較好嗎? (因為就不用一直 append) 
# # 還是差不多，Time Limit Exceeded
# class Solution:
#     def minimumVisitedCells(self, grid: List[List[int]]) -> int:
#         # BFS 
#             # 1 <= m * n <= 10**5 所以 BFS 最多也就 10**5 次
#             # 是因為支線太多 所以還是超出 Time Limit 嗎?
#                 # 因為我已經判斷只要做過就不會再重做了
        
#         len_1D = len(grid)
#         len_2D = len(grid[0])
#         mem_len = [[math.inf]*len_2D for _ in range(len_1D)]
#         next_p_list = deque([(0,0)])
#         mem_len[0][0] = 1
#         while next_p_list :
#             # print(next_p_list)
#             now_p_1D, now_p_2D = next_p_list.popleft()

#             # print("can go p :",now_p_1D,now_p_2D)
#             last_len = mem_len[now_p_1D][now_p_2D]
#             step = grid[now_p_1D][now_p_2D] +1 # +1 because I am using range
#             for next_1D in range(now_p_1D+1, min(now_p_1D+step, len_1D)) :
#                 if mem_len[next_1D][now_p_2D] == math.inf :
#                     mem_len[next_1D][now_p_2D] = last_len + 1
#                     next_p_list.append((next_1D, now_p_2D))
#             for next_2D in range(now_p_2D+1, min(now_p_2D+step, len_2D)) :
#                 if mem_len[now_p_1D][next_2D] == math.inf :
#                     mem_len[now_p_1D][next_2D] = last_len + 1
#                     next_p_list.append((now_p_1D, next_2D))

#         if mem_len[-1][-1] == math.inf:
#             return -1
#         else :
#             return mem_len[-1][-1] 

# # 按照 given ans 的想法重新實作 順便想優化
# # 怎麼還是 Time Limit Exceeded ...
# class Solution:
#     def minimumVisitedCells(self, grid: List[List[int]]) -> int:
#         len_1D = len(grid)
#         last_1d = len_1D-1
#         len_2D = len(grid[0])
#         last_2d = len_2D-1
#         candidate_result_1D_indx = [[x for x in range(len_1D)] for _ in range(len_2D)]
#         # candidate_result_1D_indx[2D] 代表 2D 這一行剩下的候選 1D 點
#         candidate_result_2D_indx = [[x for x in range(len_2D)] for _ in range(len_1D)]

#         stack = [(0,0)]
#         steps = 1
#         while stack :
#             new_stack = []
#             # print(stack)
#             for this_1D, this_2D in stack :
#                 if this_1D == last_1d and this_2D == last_2d :
#                     return steps
                
#                 can_go_len = grid[this_1D][this_2D]
#                 max_1D = this_1D + can_go_len
#                 for can_1D in candidate_result_1D_indx[this_2D].copy() :
#                     if can_1D > this_1D and can_1D <= max_1D :
#                         candidate_result_1D_indx[this_2D].remove(can_1D)
#                         candidate_result_2D_indx[can_1D].remove(this_2D)
#                         new_stack.append((can_1D, this_2D))
#                 max_2D = this_2D + can_go_len
#                 for can_2D in candidate_result_2D_indx[this_1D].copy() :
#                     if can_2D > this_2D and can_2D <= max_2D :
#                         candidate_result_2D_indx[this_1D].remove(can_2D)
#                         candidate_result_1D_indx[can_2D].remove(this_1D)
#                         new_stack.append((this_1D, can_2D))
#             stack = new_stack
#             steps += 1
#         return -1
      
# # C++ given ans 翻譯 (還是 Time Limit Exceeded...)
# # 不是直接判斷長度可以走到哪裡，而是從後選可以走的選項 判斷候選的選項可不可以走
# class Solution:
#     def minimumVisitedCells(self, grid: List[List[int]]) -> int:
#         n=len(grid)
#         m=len(grid[0])
#         pos1 = [[x for x in range(m)] for _ in range(n)]
#         pos2 = [[x for x in range(n)] for _ in range(m)]
#         # print(pos1, pos2)
#         dis = [[-1]*m for _ in range(n)]
#         dis[0][0]=1
#         q = deque()
#         def add_to_queue(i,j) :
#             # print("add_to_queue", i, j)
#             # print(pos1, pos2)
#             pos1[i].remove(j)
#             pos2[j].remove(i)
#             q.append((i,j))
#         add_to_queue(0,0)
#         while q :
#             i,j = q.popleft()
#             # print(q , pos1[i] , i, j)
#             max_j = j+grid[i][j]
#             for it in pos1[i].copy() :
#                 # print("for",it, min(pos1[i]))
#                 if it <= max_j:
#                     if it > j :
#                         dis[i][it]=dis[i][j]+1
#                         add_to_queue(i,it)
#                     continue
#             max_i = i+grid[i][j]
#             for it in pos2[j].copy() :
#                 if it <= max_i:
#                     if it > i :
#                         dis[it][j]=dis[i][j]+1
#                         add_to_queue(it,j)
#                     continue
#                 break
#         return dis[n-1][m-1]

# given ans 2 Beats 18.25%
# Time:  O(m * n * log(m + n))
# Space: O(m * n)
from sortedcontainers import SortedList
class Solution:
    def minimumVisitedCells(self, grid):
        m, n = len(grid), len(grid[0])
        end_m, end_n = m-1, n-1
        sl1 = [SortedList(range(n)) for _ in range(m)]
        sl2 = [SortedList(range(m)) for _ in range(n)]
        d, i, j = 1, 0, 0
        q = [(i, j)]
        while q:
            new_q = []
            for i, j in q:
                if i == end_m and j == end_n:
                    return d
                for k in list(sl1[i].irange(j+1, min(j+grid[i][j], end_n))):
                    new_q.append((i, k))
                    sl2[k].remove(i)
                    sl1[i].remove(k)
                for k in list(sl2[j].irange(i+1, min(i+grid[i][j], end_m))):
                    new_q.append((k, j))
                    sl1[k].remove(j)
                    sl2[j].remove(k)
            q = new_q
            d += 1
        return -1

# given ans 3 Beats 17.13%
# Time:  O(m * n * alpha(m + n)) = O(m + n)
# Space: O(m * n)
class UnionFind(object):  # Time: O(n * alpha(n)), Space: O(n)
    def __init__(self, n):
        self.set = list(range(n))
        self.rank = [0]*n
        self.right = list(range(n))  # added

    def find_set(self, x):
        stk = []
        while self.set[x] != x:  # path compression
            stk.append(x)
            x = self.set[x]
        while stk:
            self.set[stk.pop()] = x
        return x

    def union_set(self, x, y):
        x, y = self.find_set(x), self.find_set(y)
        if x == y:
            return False
        if self.rank[x] > self.rank[y]:  # union by rank
            x, y = y, x
        self.set[x] = self.set[y]
        if self.rank[x] == self.rank[y]:
            self.rank[y] += 1
        self.right[y] = max(self.right[x], self.right[y])  # added
        return True

    def right_set(self, x):  # added
        return self.right[self.find_set(x)]


class Solution(object):
    def minimumVisitedCells(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        uf1 = [UnionFind(n+1) for _ in range(m)]
        uf2 = [UnionFind(m+1) for _ in range(n)]
        d, i, j = 1, 0, 0
        q = [(i, j)]
        uf1[i].union_set(j, j+1)
        uf2[j].union_set(i, i+1)
        while q:
            new_q = []
            for i, j in q:
                if (i, j) == (m-1, n-1):
                    return d
                while uf1[i].right_set(j) <= min(j+grid[i][j], n-1):
                    k = uf1[i].right_set(j)
                    new_q.append((i, k))
                    uf2[k].union_set(i, i+1)
                    uf1[i].union_set(k, k+1)
                while uf2[j].right_set(i) <= min(i+grid[i][j], m-1):
                    k = uf2[j].right_set(i)
                    new_q.append((k, j))
                    uf1[k].union_set(j, j+1)
                    uf2[j].union_set(k, k+1)
            q = new_q
            d += 1
        return -1
    
s = Solution()
print(s.minimumVisitedCells([[2,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]))
# print(s.minimumVisitedCells([
#     [2,0,3,0],
#     [0,0,0,0],
#     [2,0,3,1],
#     [0,0,1,0]]))
# print(s.minimumVisitedCells([[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]))
# print(s.minimumVisitedCells([[2,1,0],[1,0,0]]))
# print(s.minimumVisitedCells([[6,4,8],[7,3,2],[2,1,11],[8,13,12],[4,3,0]]))
# print(s.minimumVisitedCells([[1,5,0,0,0,0,1,1,1,0]]))
# print(s.minimumVisitedCells([
# [2,6,3,18,20,26,0,17,29,27,11,6,14,18,18,13,8,17,0,17,3,13,9,10,20,26,1,7,0,14,10,11,9,24,23,11,24,20,12,4,22,23,22,9,13,21,4,20,7,13,17,14,15,3,14,15,12,1,16,0,18,7,4,12,0,17,12,14,8,0,13,0,16,14,9,11,5,6,10,8,8,15,14,14,11,5,11,13],
# [15,13,25,11,15,25,21,15,28,19,22,18,20,14,18,2,12,1,0,1,6,24,26,15,8,21,21,21,2,18,25,24,4,13,17,4,16,13,18,20,9,7,5,12,16,4,10,19,16,2,10,9,7,0,7,1,6,7,14,15,5,5,15,12,14,0,3,9,1,2,2,14,11,8,4,9,11,7,5,4,7,9,7,12,9,11,11,9],
# [11,26,15,22,19,13,16,19,5,22,15,16,5,21,14,15,6,1,14,14,17,26,9,18,11,6,15,10,11,10,16,1,2,18,3,20,4,22,21,20,2,18,16,17,21,0,19,7,17,14,20,5,20,3,20,19,19,18,16,1,13,3,9,14,10,17,14,6,12,10,6,11,8,8,8,15,13,2,7,8,12,0,5,9,5,7,1,13],
# [28,16,3,5,25,1,29,27,22,22,0,12,21,28,9,7,0,18,5,6,25,5,8,0,24,21,15,5,16,25,5,11,18,12,17,13,2,20,20,10,15,11,5,8,9,18,13,0,9,17,17,14,9,6,16,9,15,5,14,11,6,5,7,8,10,2,14,2,11,15,8,8,11,8,1,8,15,7,9,8,9,4,13,7,13,4,7,7],
# [13,7,9,17,28,2,7,29,22,17,9,0,10,21,18,13,7,6,18,20,22,7,25,0,13,16,11,11,12,23,24,4,20,1,19,11,18,0,15,7,0,3,21,7,20,20,3,15,8,5,16,10,7,12,6,14,15,7,11,9,1,12,1,15,8,0,0,17,9,7,11,8,13,8,10,7,10,1,13,12,11,9,9,9,4,12,8,1],
# [2,0,29,21,9,10,4,26,21,2,0,13,13,19,10,25,23,2,7,14,11,26,21,11,18,18,21,13,23,10,9,16,13,7,20,7,3,13,10,15,13,16,6,13,9,19,5,16,3,4,16,4,8,12,13,10,1,7,13,16,16,18,18,15,1,10,5,0,10,0,14,11,9,0,12,15,11,12,1,7,5,10,5,4,3,2,5,7],
# [17,12,1,26,8,24,23,15,14,2,5,19,18,13,0,5,10,1,26,2,7,10,19,19,18,15,12,12,11,0,4,8,7,20,14,12,7,11,7,14,6,11,19,7,9,18,10,2,18,9,12,5,0,11,5,2,9,16,2,11,16,7,14,13,8,17,15,2,13,0,8,16,5,12,12,0,9,5,9,7,0,12,7,5,9,4,5,10],
# [19,16,28,8,29,19,8,23,9,12,25,10,13,8,17,18,21,10,3,24,11,0,22,15,4,8,1,20,16,20,23,9,3,6,14,10,6,13,11,15,15,18,15,2,12,6,18,12,13,17,7,19,3,13,13,18,2,9,2,18,12,3,15,6,11,13,0,7,0,12,8,2,14,14,4,6,2,10,14,9,0,4,8,9,6,3,0,4],
# [25,3,10,24,11,13,10,5,18,1,5,13,9,3,25,17,3,13,19,24,8,18,22,23,20,19,14,0,10,2,23,13,12,6,23,17,19,7,18,18,14,7,2,6,6,16,13,10,5,1,4,17,16,15,4,0,2,12,8,0,6,4,0,10,17,7,3,1,3,9,9,11,7,1,2,11,10,9,10,5,5,5,3,8,3,5,9,7],
# [4,3,28,13,3,23,23,14,14,7,20,17,5,12,24,23,0,19,25,11,19,13,21,18,22,9,15,4,20,17,14,19,12,3,6,14,20,5,20,1,13,16,20,3,1,20,1,1,20,5,10,6,15,4,15,4,0,14,3,7,12,8,15,12,6,14,15,3,13,9,8,12,7,5,13,1,12,0,10,2,9,4,12,3,5,3,8,10],
# [2,25,27,22,11,8,19,15,21,12,9,16,2,6,20,7,18,10,5,17,1,15,0,16,14,16,5,1,5,4,15,22,5,5,5,5,4,1,0,15,4,17,2,0,1,16,8,2,9,16,9,4,3,13,3,11,2,9,3,2,8,8,14,8,10,9,16,14,6,6,10,13,10,0,12,11,1,14,11,10,5,2,4,12,12,1,12,3],
# [18,10,24,24,23,9,4,4,20,18,11,14,11,26,13,25,10,4,17,18,25,20,16,4,4,19,13,12,1,9,6,11,12,11,7,19,16,18,14,0,20,12,0,18,13,8,2,11,18,19,17,12,17,4,15,16,2,17,17,13,15,9,6,2,9,12,11,15,3,12,15,4,5,9,13,5,1,5,12,7,1,8,7,3,5,9,10,3],
# [17,26,3,4,16,17,13,10,21,5,9,3,21,13,9,13,25,3,4,3,10,18,9,7,6,3,4,5,22,17,3,10,14,21,10,13,20,16,4,6,17,8,11,14,14,19,19,3,0,0,14,1,2,0,15,6,1,10,14,3,5,6,2,13,12,14,11,1,9,12,4,12,14,11,12,1,11,11,9,7,6,3,8,3,9,8,8,0],
# [21,5,24,8,6,3,23,22,10,17,16,13,15,11,3,2,22,8,2,15,7,16,0,17,15,2,5,9,10,5,2,10,22,0,3,2,3,13,10,10,17,5,14,18,13,11,2,9,7,11,16,14,3,9,2,14,16,9,14,11,9,15,1,8,1,14,3,8,3,12,8,13,9,2,3,0,5,0,9,11,4,0,1,11,3,3,7,2],
# [24,8,14,9,5,3,24,10,15,6,14,8,13,25,23,12,23,22,24,11,7,7,22,24,6,14,21,0,7,17,21,3,15,4,2,11,3,13,16,10,17,9,12,10,16,8,12,0,0,18,9,0,15,17,9,7,10,9,14,4,15,4,10,1,6,14,2,0,1,6,5,3,8,8,13,1,8,2,0,8,4,1,9,0,6,3,0,2],
# [16,23,5,5,23,0,8,2,20,21,1,16,18,24,13,24,22,17,23,20,14,1,13,21,16,11,18,10,18,0,3,2,12,21,0,5,2,13,17,11,10,19,18,7,9,9,17,1,13,10,11,4,16,1,3,7,6,1,14,7,10,10,9,7,13,14,12,5,13,12,6,1,0,1,1,1,3,1,12,8,0,5,2,11,2,9,3,2],
# [11,0,26,5,6,2,13,18,11,4,17,3,17,1,18,0,23,21,1,22,11,15,22,17,21,12,14,0,15,18,20,2,0,6,21,8,4,10,5,1,17,7,14,19,13,10,7,5,2,14,3,14,9,4,10,16,16,3,15,7,16,8,4,12,10,9,9,7,5,5,10,10,8,2,6,9,12,12,9,5,5,5,1,0,1,8,8,9],
# [16,21,16,26,2,12,24,9,4,15,17,17,6,16,6,8,7,18,3,4,6,18,15,17,7,8,19,8,14,17,5,18,3,13,21,9,9,10,9,11,16,9,1,18,2,10,11,15,1,17,15,15,4,12,2,7,9,0,8,6,12,8,4,13,10,14,1,5,1,9,11,11,0,1,1,5,4,4,11,1,4,8,8,2,8,10,3,8],
# [9,20,0,6,5,21,20,23,5,7,23,20,1,20,6,23,23,19,4,11,9,22,18,18,20,3,0,3,2,18,15,17,3,6,4,17,11,10,3,10,15,6,14,11,17,9,1,14,15,10,6,10,1,10,7,7,5,10,10,16,11,0,15,0,3,2,1,14,1,4,4,2,3,13,13,12,5,6,1,4,0,9,11,2,2,5,7,5],
# [6,11,5,12,18,18,25,13,21,22,10,10,10,9,11,21,21,6,15,18,8,22,9,6,2,0,3,14,4,4,18,5,11,17,4,13,6,18,2,15,11,12,18,1,14,6,8,1,12,7,8,11,7,10,2,12,3,13,3,14,0,1,11,14,13,6,12,11,14,8,4,0,2,2,6,4,2,5,10,3,9,5,2,1,6,1,9,10],
# [4,12,10,17,4,10,20,0,21,22,16,9,14,11,17,12,5,2,19,2,20,16,0,18,2,4,13,11,11,4,13,9,5,9,8,8,18,0,8,4,12,0,3,16,15,12,4,14,12,14,6,3,14,7,16,7,0,13,12,1,2,3,12,8,13,1,13,6,12,9,8,8,2,1,9,7,9,10,8,2,7,8,8,4,5,9,4,7],
# [22,26,3,23,10,2,0,25,21,16,20,7,0,0,1,5,5,4,11,18,21,0,18,3,15,18,15,11,14,18,12,21,4,0,1,11,2,12,7,0,13,13,14,7,2,12,11,3,9,5,17,12,8,9,3,5,8,11,6,13,4,0,3,12,7,10,10,6,12,5,12,3,7,6,10,7,10,1,7,4,1,2,0,10,4,8,0,5],
# [21,1,2,26,15,25,19,21,9,23,0,10,21,14,22,22,19,10,4,14,15,17,12,21,16,6,13,8,17,4,2,9,14,17,15,16,2,11,14,7,7,8,13,18,6,2,1,7,4,4,6,1,0,12,0,0,5,13,8,11,14,9,6,9,14,9,10,0,8,13,0,6,0,0,4,5,7,6,7,1,8,6,8,7,8,2,9,5],
# [21,20,10,8,12,9,15,24,10,1,7,2,10,5,4,14,8,9,5,3,14,10,20,11,10,1,16,21,2,10,2,15,17,9,19,12,8,9,3,15,3,17,8,14,6,3,17,8,3,11,1,9,7,1,6,13,11,1,6,1,4,10,7,7,12,10,0,11,4,0,10,0,9,0,6,5,3,11,10,6,6,9,4,0,5,9,6,7],
# [9,13,9,19,0,0,9,8,5,4,3,10,21,16,12,19,9,20,12,1,19,10,15,11,1,21,9,10,18,1,19,13,15,13,6,5,15,7,13,8,5,18,6,14,14,13,16,16,6,1,14,16,9,12,5,1,10,4,1,4,13,11,7,1,5,3,8,6,2,3,1,12,3,4,1,1,8,3,3,0,6,3,8,7,6,5,5,7],
# [23,25,12,14,10,7,22,20,15,15,24,3,19,19,15,15,4,11,9,18,3,15,9,3,8,0,13,10,2,18,5,13,15,1,3,14,16,5,16,16,18,15,7,14,14,4,10,8,4,1,5,5,14,14,12,9,0,7,3,5,2,11,7,0,11,3,3,13,2,6,12,10,2,7,2,3,8,10,1,0,8,1,8,4,3,2,0,5],
# [6,18,10,15,4,18,24,24,20,15,16,21,8,5,1,6,21,10,3,21,16,16,0,4,6,19,17,12,20,13,5,18,12,10,16,13,18,1,12,18,0,5,17,5,4,4,9,13,13,8,2,3,11,13,11,1,7,11,4,11,10,3,3,7,9,6,8,9,11,1,10,2,3,9,9,0,5,3,4,4,0,6,1,6,7,7,1,2],
# [26,9,0,25,1,10,5,11,5,5,21,6,12,19,15,17,7,6,3,4,16,12,16,1,12,9,2,16,5,3,6,12,9,18,7,10,0,16,7,12,0,17,4,5,5,10,12,15,11,13,15,10,14,14,2,3,9,7,11,9,13,8,5,10,10,12,3,12,2,0,4,1,6,5,11,4,5,2,8,4,5,5,0,2,8,5,2,3],
# [15,2,12,21,24,10,11,21,9,8,15,4,23,22,10,2,1,13,0,7,14,19,17,11,12,15,13,16,18,3,16,13,17,6,7,1,17,15,15,18,9,17,13,1,17,12,16,10,0,5,10,11,3,11,14,10,10,10,0,8,13,4,9,4,5,1,12,2,6,11,8,10,7,0,7,1,0,10,1,6,7,9,3,3,1,0,6,0],
# [14,1,21,15,5,24,12,9,9,23,8,23,6,21,1,18,7,0,18,6,17,11,2,10,13,4,20,13,14,10,18,11,10,1,5,12,7,14,18,1,4,6,9,3,3,8,10,3,4,1,7,0,15,11,14,3,12,11,6,3,0,2,1,11,2,1,0,7,1,1,7,2,4,7,4,9,1,7,7,1,4,3,3,0,1,7,2,8],
# [5,12,20,16,8,17,17,21,6,21,2,4,6,10,13,17,21,11,17,9,10,0,18,17,10,12,13,15,17,19,5,6,15,5,0,15,6,15,13,13,10,11,15,11,7,15,0,9,3,13,5,9,10,3,0,1,10,14,12,4,10,12,6,9,0,6,9,7,7,0,7,9,1,2,5,5,5,4,7,5,8,6,2,2,8,6,5,4],
# [15,17,9,21,22,17,15,19,22,12,15,21,9,14,18,15,18,9,15,18,13,0,16,3,12,1,3,16,16,11,14,9,12,5,1,5,4,4,8,3,3,1,8,1,3,5,11,13,4,8,4,11,2,5,7,12,9,12,2,8,9,13,12,9,9,11,3,5,9,5,7,11,10,6,9,2,2,7,4,4,3,6,7,1,2,2,7,1],
# [15,11,14,22,19,2,4,16,22,7,5,0,16,21,10,19,20,2,15,6,8,2,6,4,9,11,19,14,17,18,0,16,0,7,12,6,13,4,7,10,16,0,8,15,9,3,4,15,10,5,15,12,1,13,10,11,4,2,10,6,13,2,8,10,10,8,4,5,6,6,7,6,5,4,0,8,2,2,4,5,8,7,3,0,7,5,0,3],
# [9,6,17,12,2,12,12,1,21,17,3,9,14,13,14,4,6,5,19,2,5,4,14,0,5,13,4,1,2,16,1,14,7,8,12,10,0,2,3,10,16,9,15,5,14,4,0,5,10,14,13,6,10,12,0,3,1,3,0,6,1,4,2,1,5,6,6,4,3,3,8,2,7,6,1,8,7,2,9,0,0,5,0,3,8,1,2,2],
# [7,13,24,3,13,10,20,3,21,20,22,13,6,11,3,8,6,14,6,12,12,3,8,0,1,16,6,4,9,13,11,13,5,14,0,2,11,8,1,10,13,1,3,15,4,14,9,14,12,8,3,14,11,2,13,11,1,1,3,11,11,10,6,7,11,10,8,4,2,5,9,1,8,2,9,1,1,4,7,4,4,5,7,8,6,7,2,6],
# [24,2,10,9,0,13,7,1,18,1,13,10,16,4,5,7,21,20,10,15,3,19,11,12,16,17,2,0,3,5,15,3,6,0,17,12,4,11,16,15,12,13,9,13,9,6,11,9,13,12,0,7,1,12,10,2,6,9,2,8,12,4,6,10,11,1,10,3,4,5,8,4,7,7,7,9,5,7,4,0,7,6,3,1,0,1,6,2],
# [3,8,20,12,11,18,23,8,18,17,8,13,19,10,7,5,18,6,1,20,9,14,16,5,0,2,8,17,18,11,10,9,3,10,0,0,14,11,1,13,11,5,5,0,7,0,1,11,11,9,3,6,8,3,4,1,7,6,12,8,6,2,3,10,8,1,7,3,5,8,0,7,3,1,3,6,7,2,4,6,5,7,5,3,6,4,2,2],
# [5,2,2,6,3,5,13,14,2,2,12,4,8,19,7,1,17,19,16,15,14,18,5,13,14,7,14,6,8,8,6,8,17,2,12,15,12,10,6,10,16,7,2,1,2,7,9,0,11,5,7,11,1,3,1,8,6,4,6,10,2,1,3,1,8,5,2,3,2,7,4,9,7,2,7,4,5,3,1,0,6,4,3,2,3,0,1,1],
# [16,22,17,7,11,12,8,14,10,4,6,18,12,4,9,12,19,4,20,10,9,4,4,16,1,10,13,1,0,15,0,4,8,7,4,16,11,16,12,1,10,8,9,13,10,9,0,2,14,4,4,11,6,12,12,10,6,4,7,2,6,3,6,10,2,6,2,5,1,4,2,2,8,1,4,2,2,4,2,4,6,6,4,7,0,0,3,2],
# [11,14,17,16,16,21,8,1,6,6,18,21,6,8,1,13,10,5,1,13,15,9,16,16,1,10,11,18,8,16,3,11,13,13,0,2,1,0,16,0,10,7,14,4,5,6,6,5,6,0,9,4,13,10,0,10,10,8,10,9,10,2,3,8,10,5,4,1,0,1,7,6,4,2,3,2,3,6,7,4,6,0,7,0,4,0,4,0],
# [23,1,22,18,10,15,4,22,12,13,21,5,5,9,9,6,11,19,0,15,3,13,12,1,11,14,8,10,14,13,10,2,13,0,3,13,3,16,12,4,0,3,2,0,3,2,1,2,2,13,9,0,3,9,6,12,12,4,11,5,2,0,11,8,6,8,3,1,2,1,1,9,5,6,3,3,8,2,7,5,7,2,2,0,0,6,5,3],
# [15,1,18,10,0,13,11,17,8,9,8,9,10,18,3,3,20,18,4,17,16,2,2,7,4,16,18,11,0,1,6,17,10,3,12,1,16,13,13,7,11,2,13,8,12,10,1,13,1,5,13,10,0,7,0,11,2,9,6,3,7,8,6,10,3,2,8,7,2,6,2,7,0,4,8,4,3,5,4,7,0,0,4,4,1,6,5,2],
# [19,4,10,1,22,3,11,11,14,8,17,4,19,20,3,11,13,1,11,10,8,8,13,0,17,8,9,17,14,14,16,2,7,13,2,10,11,12,9,9,5,10,5,3,0,12,4,11,11,11,6,6,12,3,6,5,8,3,0,5,5,6,0,5,10,7,1,8,6,9,3,8,3,3,1,2,2,6,0,4,2,0,0,3,6,4,3,3],
# [11,13,5,18,11,16,2,21,15,11,15,11,7,3,18,3,17,11,4,12,2,12,1,3,18,12,17,14,17,10,14,13,2,1,11,8,15,11,10,2,9,2,14,12,6,9,9,3,12,0,8,12,2,9,8,2,5,2,7,5,2,7,0,7,4,9,0,2,3,2,5,1,5,6,8,5,0,5,2,3,0,1,3,5,1,0,4,0],
# [0,5,11,11,17,16,2,11,12,4,5,16,16,16,1,12,9,1,1,3,18,2,7,0,6,14,1,8,11,6,0,3,8,3,9,6,9,4,5,1,3,11,12,12,10,12,5,0,12,7,1,3,3,12,2,0,0,3,3,0,4,10,5,7,3,8,0,1,7,8,0,5,6,8,5,4,2,7,0,0,6,4,3,3,0,3,0,2],
# [1,10,8,17,3,12,6,8,19,8,16,17,4,18,4,15,18,10,14,1,6,10,10,6,10,12,15,13,15,1,4,13,14,3,10,12,15,13,11,13,10,8,9,10,13,9,3,8,4,8,8,7,11,6,2,0,11,9,2,1,2,5,2,7,4,4,1,3,2,2,5,7,7,7,2,5,5,2,3,0,3,6,2,4,3,4,2,3],
# [9,19,2,6,15,9,6,2,7,4,0,8,7,12,16,5,7,13,9,17,8,6,10,3,14,4,8,0,13,13,10,8,10,6,5,2,6,0,11,0,7,8,7,11,10,0,10,12,1,7,12,11,11,8,0,6,0,5,10,0,3,5,5,7,1,7,0,2,1,7,3,4,4,7,1,6,7,3,6,2,0,6,5,3,2,1,4,2],
# [1,1,4,0,16,17,17,15,1,11,4,16,13,4,17,13,10,8,4,7,7,14,2,10,5,8,6,9,12,14,11,7,3,11,7,14,4,5,14,5,8,12,10,2,4,5,3,7,11,5,2,0,7,3,10,6,1,8,7,6,10,3,0,5,5,0,3,7,0,5,7,5,3,1,0,0,4,6,1,6,3,1,4,2,1,5,2,0],
# [11,1,21,10,20,9,8,6,13,5,9,18,3,15,1,16,8,0,3,16,12,7,16,4,0,11,13,11,13,1,12,4,2,7,7,4,2,6,12,7,9,2,10,1,7,5,8,0,12,10,8,9,6,2,11,4,3,3,1,9,3,9,0,2,8,4,6,7,7,8,5,5,5,1,0,6,1,0,2,1,1,4,3,5,3,3,1,2],
# [10,14,5,0,17,10,10,19,14,5,3,19,19,8,16,13,9,3,9,14,3,9,10,2,11,14,13,8,16,11,12,0,15,11,3,6,10,8,5,7,7,6,1,6,3,4,3,11,0,11,11,10,0,7,2,8,2,4,3,4,6,4,7,4,0,0,2,0,4,4,6,4,1,7,5,5,0,3,3,1,3,1,2,2,1,2,0,2],
# [11,14,11,4,4,3,11,15,14,6,6,13,2,6,10,10,0,13,12,5,11,7,11,10,8,8,11,2,11,13,3,13,6,6,5,10,12,12,12,5,8,0,7,2,4,6,10,5,11,3,3,1,0,9,10,9,6,3,6,2,5,1,0,6,7,4,3,7,7,4,3,0,6,2,2,2,0,5,4,1,3,1,3,3,3,3,1,1],
# [18,13,7,11,0,14,3,14,7,9,12,10,8,4,8,3,6,12,15,10,4,12,16,0,2,9,1,15,14,0,3,14,2,7,6,13,6,12,10,12,11,6,12,11,9,4,3,1,6,5,8,4,3,8,4,6,2,1,7,7,6,3,5,0,3,2,0,1,2,4,1,3,5,0,3,5,4,0,2,3,1,2,0,1,0,2,0,2],
# [7,11,14,14,0,12,13,3,2,15,9,9,10,14,10,5,14,0,11,7,4,7,7,8,3,5,1,7,14,0,10,14,10,14,7,10,6,7,3,12,2,11,1,12,2,7,9,11,2,10,5,5,8,5,2,8,8,2,8,5,6,6,5,5,3,6,1,3,6,0,3,6,4,4,1,5,2,1,0,0,5,4,2,3,2,3,2,1],
# [4,14,15,8,18,13,19,8,11,9,6,12,14,11,4,14,2,15,10,6,9,4,4,3,13,5,3,11,9,6,2,4,14,6,7,3,4,7,8,12,6,2,0,6,0,8,5,7,1,1,6,9,1,4,10,1,0,8,4,5,0,2,5,5,4,4,1,1,3,1,1,6,2,5,6,5,0,3,0,0,1,2,0,3,4,2,1,2],
# [5,5,19,14,18,14,4,11,6,18,14,17,13,2,12,16,9,15,7,8,8,12,9,8,0,8,12,5,8,11,5,1,11,4,12,12,13,8,7,10,7,8,9,12,8,1,3,11,11,4,9,10,10,6,1,9,6,1,4,1,1,8,8,1,1,7,3,3,3,2,6,1,4,5,1,0,0,5,5,3,1,0,2,1,0,0,2,3],
# [6,9,20,19,4,0,8,11,2,5,7,1,6,9,4,8,10,7,6,3,10,10,13,3,4,10,2,14,10,11,7,8,2,3,6,9,9,8,6,8,8,11,10,6,11,5,6,6,0,4,2,8,1,5,2,4,4,3,2,5,4,6,8,6,7,0,4,7,4,0,6,2,3,4,4,2,2,0,0,1,1,2,2,0,0,1,3,2],
# [16,19,1,14,11,8,19,7,2,12,0,6,13,15,13,12,0,11,9,1,11,3,14,7,1,14,13,0,14,2,5,6,9,1,8,3,6,0,5,3,2,8,5,7,11,4,1,1,0,2,6,9,8,6,8,1,9,7,2,2,5,6,2,5,0,6,5,1,1,5,4,0,0,0,4,0,1,4,2,1,2,1,3,0,0,0,2,1],
# [13,18,9,11,2,10,14,2,12,14,10,3,7,9,0,17,14,1,9,8,7,13,14,2,14,2,4,12,10,3,4,8,11,2,11,6,9,8,5,7,11,5,6,6,5,9,0,6,0,10,5,4,5,2,0,8,8,5,3,5,7,3,1,1,0,5,1,3,0,0,1,0,1,1,1,4,3,2,4,4,0,3,0,1,1,2,0,2],
# [19,17,1,18,9,2,5,11,0,17,9,6,17,10,4,4,4,1,4,6,14,2,4,1,1,11,11,11,4,6,9,12,0,12,5,11,10,5,4,2,0,11,7,4,5,7,1,10,4,3,1,7,6,2,1,6,5,4,2,2,5,6,6,0,6,0,3,3,2,1,0,1,5,1,5,1,1,4,1,3,0,0,1,3,3,1,1,2],
# [17,18,16,18,1,6,12,3,13,12,16,12,9,17,10,0,5,8,11,6,0,3,1,4,8,11,10,7,3,12,12,5,4,11,11,11,5,4,0,6,5,9,7,1,3,3,9,6,7,5,3,5,5,3,7,4,1,3,2,7,2,3,6,5,0,1,6,2,6,5,4,4,0,0,3,1,1,1,3,1,1,3,0,3,0,0,1,1],
# [9,9,17,6,5,4,7,2,5,10,1,3,14,0,0,10,8,2,8,4,4,6,11,11,11,2,8,3,6,8,13,4,8,9,2,2,4,11,10,5,0,9,7,5,8,8,2,7,2,0,0,0,9,5,7,7,7,2,0,7,5,2,7,6,3,1,1,4,1,2,5,1,5,3,1,4,4,0,1,0,0,1,1,1,2,2,2,1],
# [9,2,10,15,4,7,10,5,14,16,7,4,2,9,0,11,1,8,7,9,10,10,2,2,13,0,12,13,11,6,8,3,2,10,1,4,4,7,10,11,9,10,2,6,6,1,7,1,0,7,9,6,2,0,7,4,2,1,7,5,6,3,2,1,1,2,6,0,2,1,1,3,4,0,1,2,2,3,2,1,0,0,0,1,1,0,1,0],
# [4,12,10,3,8,0,5,17,0,10,5,7,12,3,9,2,0,12,12,1,14,0,3,2,1,1,3,9,13,5,10,3,7,1,7,7,3,0,9,9,8,10,9,10,3,7,9,5,7,9,3,5,2,2,4,7,5,3,6,7,7,5,1,4,6,0,2,1,5,1,0,4,1,0,1,0,0,2,0,1,0,1,1,2,0,0,1,1],
# [12,16,4,18,4,2,16,11,7,12,10,9,6,8,12,7,14,14,15,6,5,3,8,11,2,7,9,7,6,8,4,3,2,7,5,1,7,9,9,5,6,8,7,7,3,4,7,9,0,4,3,3,5,6,5,1,6,7,3,2,0,0,3,2,1,5,4,0,5,1,4,0,0,1,3,1,1,0,0,1,2,1,2,0,0,0,2,2],
# [13,1,9,7,5,15,17,13,12,6,0,9,12,16,8,12,10,6,11,1,11,13,13,12,9,5,8,2,6,7,7,8,11,4,6,1,0,10,7,7,7,10,5,2,5,2,9,6,4,6,1,1,0,3,4,3,4,7,3,2,4,4,1,4,2,4,4,5,5,0,2,3,0,2,1,3,0,3,3,2,0,0,1,1,1,1,2,1],
# [10,4,15,15,13,17,9,4,13,4,11,16,5,5,3,8,10,12,12,7,12,14,13,6,9,9,11,1,7,3,4,7,2,11,9,11,5,0,1,10,7,10,9,4,9,1,6,4,6,0,7,1,0,6,6,6,7,4,5,2,0,1,3,3,4,2,3,2,2,1,3,0,0,0,0,0,0,0,1,0,2,0,1,1,0,2,1,0],
# [13,16,10,4,7,17,17,0,8,15,13,15,8,13,3,7,13,12,11,3,0,3,3,5,5,1,5,1,9,3,5,5,3,11,3,5,11,6,7,8,4,0,0,5,5,6,0,3,5,1,3,2,7,2,7,5,0,4,5,3,1,2,1,3,4,3,1,1,4,0,0,4,2,3,2,0,3,0,1,2,0,0,2,2,1,1,0,1],
# [17,5,14,2,16,5,0,16,9,14,5,1,10,5,3,3,5,6,13,10,12,13,3,12,8,3,2,6,8,1,10,2,6,4,4,5,4,7,3,4,3,4,6,9,3,7,1,3,1,8,4,0,6,3,2,2,6,6,1,4,1,3,5,1,2,0,0,3,4,1,1,0,1,0,3,1,0,1,0,0,2,2,2,1,1,0,2,0],
# [2,3,7,16,7,4,1,15,2,4,4,4,14,12,15,10,4,1,1,2,4,5,1,5,9,9,8,0,10,10,1,1,2,6,0,6,4,8,10,9,8,5,8,4,8,5,3,5,8,6,3,2,0,6,5,3,3,0,6,1,2,1,4,0,5,4,3,1,2,3,0,2,1,2,2,1,1,1,2,0,1,1,1,0,1,1,1,1],
# [2,10,15,6,1,1,5,6,12,7,11,0,5,6,9,8,9,9,14,13,2,8,3,6,6,7,10,2,10,5,10,11,11,11,0,9,0,2,0,6,9,0,8,4,0,6,5,3,7,2,5,6,7,0,5,5,1,5,2,5,5,5,4,0,3,3,3,1,2,3,3,2,2,3,0,0,2,2,2,1,0,1,0,2,0,2,2,1],
# [13,6,0,10,5,10,7,12,5,1,15,5,7,8,12,10,11,11,11,9,13,2,3,0,6,0,7,11,11,7,6,3,3,7,2,7,3,3,7,0,3,7,9,2,7,4,3,4,1,5,6,0,6,5,0,0,3,3,4,2,3,1,3,0,2,0,0,4,3,3,2,1,0,2,1,1,2,2,0,2,0,0,0,2,1,2,0,0]]))



